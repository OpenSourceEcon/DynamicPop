install_github("timriffe/DemoTools")
install_github("timriffe/DemoTools")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
.libpaths()
.libPaths()
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "lattice", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "lattice", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "lattice", "nlme", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "lattice", "nnet", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "lattice", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "lattice", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("class", "lattice"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("cluster")
install.packages("codetools")
install.packages("foreign")
install.packages("Kernsmooth")
install.packages("KernSmooth")
install.packages("MASS")
install.packages("Matrix")
install.packages("mgcv")
install.packages("nlme")
install.packages("nnet")
install.packages("rpart")
install.packages("survival")
install.packages("class")
install.packages("lattice")
library(devtools)
install_github("timriffe/DemoTools")
install.packages("installr")
library(installr)
install.packages("installr")
install.packages("installr")
install.packages(c("devtools", "fs", "reticulate", "rlang", "usethis"))
rm(list=ls())
library(rlang)
library(reticulate)
use_python('/usr/local/bin/python')
library(demography)
getwd()
setwd('/Users/adamalexanderoppenheimer/Desktop/DynamicPop/data/demographic')
pd <- import('pandas')
fert_full <- pd$read_pickle('clean/fert.p')
pop_data <- fert_full[[1]]
fert_data <- fert_full[[2]]
mort_full <- pd$read_pickle('clean/mort.p')
non_inf_mort <- mort_full[[3]]
inf_mort <- mort_full[[4]]
mort_data = matrix(rbinom(100 * 70, 1, 0.5), ncol = 70, nrow = 100)
for (i in 1:dim(inf_mort)) {
mort_data[,i] = prepend(unlist(non_inf_mort[i]), unlist(inf_mort[i]))
}
mort_data = as.data.frame(mort_data)
colnames(mort_data) <- colnames(non_inf_mort)
imm_data <- pd$read_pickle('clean/imm.p')
########################################
##### Construct Demography Objects #####
########################################
# Box-Cox (lambda) values: 0 (for mortality), 0.4 (for fertility) and 1 (for migration)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/read.demogdata
demog_obj_fert = demogdata(fert_data, pop_data[15:51, 1:68], as.numeric(rownames(fert_data)), as.numeric(colnames(pop_data[,1:68])), 'fertility', 'Japan', 'Total', 0.4)
demog_obj_mort = demogdata(mort_data, pop_data[, 1:70], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[, 1:70])), 'mortality', 'Japan', 'Total', 0)
demog_obj_imm = demogdata(imm_data, pop_data[51:69], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[51:69])), 'migration', 'Japan', 'Total', 1)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/fdm
fdm_fert = fdm(demog_obj_fert)
fdm_mort = fdm(demog_obj_mort)
fdm_imm = fdm(demog_obj_imm)
# Forecast variables up to 2100 (up to 2050 for model, up to 2100 for graphs)
forecast_fert = forecast(fdm_fert, h=86)
forecast_mort = forecast(fdm_mort, h=84)
forecast_imm = forecast(fdm_imm, h=85)
fitted_fert = forecast_fert['error'][[1]][2]
fitted_mort = forecast_mort['error'][[1]][2]
fitted_imm = forecast_imm['error'][[1]][2]
plot(fitted_fert)
forecast_fert['error'][[1]][1]
forecast_fert['error'][[1]]['x']
forecast_fert['error'][[1]]['y']
y = forecast_fert['error'][[1]]['y'][2014]
y
forecast_fert['error'][[1]]['y']
forecast_fert['error'][[1]]['y', 2014]
forecast_fert['error'][[1]]['y'][2014]
y = forecast_fert['error'][[1]]['y']
y[2014]
y
dim(y)
length(y)
y[[1]]
y = y[[1]]
dim(y)
x
x = forecast_fert['error'][[1]]['x']
dim(x)
length(x)
x = x[[1]]
x
dim(x)
length(x)
y
y[2014]
y[, 2014]
y[:, 2014]
dim(y)
y(, 2014)
y[, 2014]
y[1:37, 2014]
y[1:37, 68]
y[, 68]
plot(x, y[,68])
attributes(forecast_fert)
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = y[[1]]
plot(x, y[,68])
min(y)
x
y
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = y[[1]] + min(y[[1]])
plot(x, y[,68])
min(y[[1]])
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = y[[1]] - min(y[[1]])
plot(x, y[,68])
plot(x, y[,58])
plot(x, y[,28])
attributes(forecast_fert)
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y_err = forecast_fert['error'][[1]]['y']
y = y[[1]] + y_err #- min(y[[1]])
plot(x, y[,28])
y_err
y_err
dim(y_err)
length(y_err)
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y_err = forecast_fert['error'][[1]]['y']
y_err = y_err[[1]]
y = y[[1]] + y_err #- min(y[[1]])
plot(x, y[,28])
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y_err = forecast_fert['error'][[1]]['y']
y_err = y_err[[1]]
y = y[[1]] + y_err - min(y[[1]] + y_err)
plot(x, y[,28])
attributes(forecast_fert)
forecast_fert['class']
forecast_fert['names']
forecast_fert['lambda']
scale = forecast_fert['lambda']
scale
scale * 2
length(scale)
scale = scale[[1]]
scale
2 * scale
scale = forecast_fert['lambda']
scale = scale[[1]]
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = (y[[1]] + min(y[[1]])) * scale
plot(x, y[,28])
scale = forecast_fert['lambda']
scale = scale[[1]]
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = (y[[1]] - min(y[[1]])) * scale
plot(x, y[,28])
scale
plot(x, y[,38])
forecast_fert['coeff']
imm_scale = forecast_imm['lambda']
imm_scale = imm_scale[[1]]
imm_scale
mort_scale = forecast_mort['lambda']
mort_scale = mort_scale[[1]]
mort_scale
x1 = forecast_fert['error'][[1]]['x']
x1 = x1[[1]]
y1 = forecast_fert['error'][[1]]['y']
y1 = y1[[1]]
scale = forecast_fert['lambda']
scale = scale[[1]]
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = (y[[1]] - min(y[[1]])) + y1 # * scale
plot(x, y[,38])
scale = forecast_fert['lambda']
scale = scale[[1]]
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = (y[[1]] - min(y[[1]])) * scale + y1
plot(x, y[,38])
scale = forecast_fert['lambda']
scale = scale[[1]]
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = ((y[[1]] - min(y[[1]])) + y1 ) * scale
plot(x, y[,38])
plot(x, y[,58])
plot(x, y[,68])
plot(x, y[,28])
lca_fert = lca(demog_obj_fert)
lca_mort = lca(demog_obj_mort)
lca_imm = lca(demog_obj_imm)
fdm_fert = fdm(demog_obj_fert, transform = FALSE)
fdm_mort = fdm(demog_obj_mort, transform = FALSE)
fdm_imm = fdm(demog_obj_imm, transform = FALSE)
# Forecast variables up to 2100 (up to 2050 for model, up to 2100 for graphs)
forecast_fert = forecast(fdm_fert, h=86)
forecast_mort = forecast(fdm_mort, h=84)
forecast_imm = forecast(fdm_imm, h=85)
fitted_fert = forecast_fert['error'][[1]][2]
fitted_mort = forecast_mort['error'][[1]][2]
fitted_imm = forecast_imm['error'][[1]][2]
x1 = forecast_fert['error'][[1]]['x']
x1 = x1[[1]]
y1 = forecast_fert['error'][[1]]['y']
y1 = y1[[1]]
plot(x, y[,68])
scale = forecast_fert['lambda']
scale = scale[[1]]
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = ((y[[1]] - min(y[[1]])) + y1 ) # * scale
plot(x, y[,28])
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = (y[[1]] # ((y[[1]] - min(y[[1]]))) # * scale
plot(x, y[,28])
scale = forecast_fert['lambda']
scale = scale[[1]]
x = forecast_fert['fitted'][[1]]['x']
x = x[[1]]
y = forecast_fert['fitted'][[1]]['y']
y = y[[1]] # ((y[[1]] - min(y[[1]]))) # * scale
plot(x, y[,28])
rm(list=ls())
library(rlang)
library(reticulate)
use_python('/usr/local/bin/python')
library(demography)
getwd()
setwd('/Users/adamalexanderoppenheimer/Desktop/DynamicPop/data/demographic')
pd <- import('pandas')
fert_full <- pd$read_pickle('clean/fert.p')
pop_data <- fert_full[[1]]
fert_data <- fert_full[[2]]
mort_full <- pd$read_pickle('clean/mort.p')
non_inf_mort <- mort_full[[3]]
inf_mort <- mort_full[[4]]
mort_data = matrix(rbinom(100 * 70, 1, 0.5), ncol = 70, nrow = 100)
for (i in 1:dim(inf_mort)) {
mort_data[,i] = prepend(unlist(non_inf_mort[i]), unlist(inf_mort[i]))
}
mort_data = as.data.frame(mort_data)
colnames(mort_data) <- colnames(non_inf_mort)
imm_data <- pd$read_pickle('clean/imm.p')
########################################
##### Construct Demography Objects #####
########################################
# Box-Cox (lambda) values: 0 (for mortality), 0.4 (for fertility) and 1 (for migration)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/read.demogdata
demog_obj_fert = demogdata(fert_data, pop_data[15:51, 1:68], as.numeric(rownames(fert_data)), as.numeric(colnames(pop_data[,1:68])), 'fertility', 'Japan', 'Total', 0.4)
demog_obj_mort = demogdata(mort_data, pop_data[, 1:70], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[, 1:70])), 'mortality', 'Japan', 'Total', 0)
demog_obj_imm = demogdata(imm_data, pop_data[51:69], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[51:69])), 'migration', 'Japan', 'Total', 1)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/fdm
# Set transform = FALSE to ensure past data is able to be used in graphs
fdm_fert = fdm(demog_obj_fert, transform = FALSE)
fdm_mort = fdm(demog_obj_mort, transform = FALSE)
fdm_imm = fdm(demog_obj_imm, transform = FALSE)
# Forecast variables up to 2100 (up to 2050 for model, up to 2100 for graphs)
forecast_fert = forecast(fdm_fert, h=86)
forecast_mort = forecast(fdm_mort, h=84)
forecast_imm = forecast(fdm_imm, h=85)
fitted_fert = forecast_fert['error'][[1]][2]
fitted_mort = forecast_mort['error'][[1]][2]
fitted_imm = forecast_imm['error'][[1]][2]
write.csv(fitted_fert,'r_forecasts/fert_fitted_err.csv', row.names = FALSE)
write.csv(fitted_mort,'r_forecasts/mort_fitted_err.csv', row.names = FALSE)
write.csv(fitted_imm,'r_forecasts/imm_fitted_err.csv', row.names = FALSE)
future_fert = forecast_fert['rate']
future_mort = forecast_mort['rate']
future_imm = forecast_imm['rate']
write.csv(future_fert,'r_forecasts/fert_pred.csv', row.names = FALSE)
write.csv(future_mort,'r_forecasts/mort_pred.csv', row.names = FALSE)
write.csv(future_imm,'r_forecasts/imm_pred.csv', row.names = FALSE)
rm(list=ls())
library(rlang)
library(reticulate)
use_python('/usr/local/bin/python')
library(demography)
getwd()
setwd('/Users/adamalexanderoppenheimer/Desktop/DynamicPop/data/demographic')
pd <- import('pandas')
fert_full <- pd$read_pickle('clean/fert.p')
pop_data <- fert_full[[1]]
fert_data <- fert_full[[2]]
mort_full <- pd$read_pickle('clean/mort.p')
non_inf_mort <- mort_full[[3]]
inf_mort <- mort_full[[4]]
mort_data = matrix(rbinom(100 * 70, 1, 0.5), ncol = 70, nrow = 100)
for (i in 1:dim(inf_mort)) {
mort_data[,i] = prepend(unlist(non_inf_mort[i]), unlist(inf_mort[i]))
}
mort_data = as.data.frame(mort_data)
colnames(mort_data) <- colnames(non_inf_mort)
imm_data <- pd$read_pickle('clean/imm.p')
########################################
##### Construct Demography Objects #####
########################################
# Box-Cox (lambda) values: 0 (for mortality), 0.4 (for fertility) and 1 (for migration)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/read.demogdata
demog_obj_fert = demogdata(fert_data, pop_data[15:51, 1:68], as.numeric(rownames(fert_data)), as.numeric(colnames(pop_data[,1:68])), 'fertility', 'Japan', 'Total', 0.4)
demog_obj_mort = demogdata(mort_data, pop_data[, 1:70], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[, 1:70])), 'mortality', 'Japan', 'Total', 0)
demog_obj_imm = demogdata(imm_data, pop_data[51:69], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[51:69])), 'migration', 'Japan', 'Total', 1)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/fdm
# Set transform = FALSE to ensure past data is able to be used in graphs
fdm_fert = fdm(demog_obj_fert, transform = FALSE)
fdm_mort = fdm(demog_obj_mort, transform = FALSE)
fdm_imm = fdm(demog_obj_imm, transform = FALSE)
# Forecast variables up to 2100 (up to 2050 for model, up to 2100 for graphs)
forecast_fert = forecast(fdm_fert, h=86)
forecast_mort = forecast(fdm_mort, h=84)
forecast_imm = forecast(fdm_imm, h=85)
fitted_fert = forecast_fert['fitted'][[1]]['y']
fitted_mort = forecast_mort['fitted'][[1]]['y']
fitted_imm = forecast_imm['fitted'][[1]]['y']
write.csv(fitted_fert,'r_forecasts/fert_fitted.csv', row.names = FALSE)
write.csv(fitted_mort,'r_forecasts/mort_fitted.csv', row.names = FALSE)
write.csv(fitted_imm,'r_forecasts/imm_fitted.csv', row.names = FALSE)
future_fert = forecast_fert['rate']
future_mort = forecast_mort['rate']
future_imm = forecast_imm['rate']
write.csv(future_fert,'r_forecasts/fert_pred.csv', row.names = FALSE)
write.csv(future_mort,'r_forecasts/mort_pred.csv', row.names = FALSE)
write.csv(future_imm,'r_forecasts/imm_pred.csv', row.names = FALSE)
rm(list=ls())
library(rlang)
library(reticulate)
use_python('/usr/local/bin/python')
library(demography)
getwd()
setwd('/Users/adamalexanderoppenheimer/Desktop/DynamicPop/data/demographic')
pd <- import('pandas')
fert_full <- pd$read_pickle('clean/fert.p')
pop_data <- fert_full[[1]]
fert_data <- fert_full[[2]]
mort_full <- pd$read_pickle('clean/mort.p')
non_inf_mort <- mort_full[[3]]
inf_mort <- mort_full[[4]]
mort_data = matrix(rbinom(100 * 70, 1, 0.5), ncol = 70, nrow = 100)
for (i in 1:dim(inf_mort)) {
mort_data[,i] = prepend(unlist(non_inf_mort[i]), unlist(inf_mort[i]))
}
mort_data = as.data.frame(mort_data)
colnames(mort_data) <- colnames(non_inf_mort)
imm_data <- pd$read_pickle('clean/imm.p')
########################################
##### Construct Demography Objects #####
########################################
# Box-Cox (lambda) values: 0 (for mortality), 0.4 (for fertility) and 1 (for migration)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/read.demogdata
demog_obj_fert = demogdata(fert_data, pop_data[15:51, 1:68], as.numeric(rownames(fert_data)), as.numeric(colnames(pop_data[,1:68])), 'fertility', 'Japan', 'Total', 0.4)
demog_obj_mort = demogdata(mort_data, pop_data[, 1:70], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[, 1:70])), 'mortality', 'Japan', 'Total', 0)
demog_obj_imm = demogdata(imm_data, pop_data[51:69], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[51:69])), 'migration', 'Japan', 'Total', 1)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/fdm
# Set transform = FALSE to ensure past data is able to be used in graphs
fdm_fert = fdm(demog_obj_fert, transform = FALSE)
fdm_mort = fdm(demog_obj_mort, transform = FALSE)
fdm_imm = fdm(demog_obj_imm, transform = FALSE)
# Forecast variables up to 2100 (up to 2050 for model, up to 2500 for graphs)
forecast_fert = forecast(fdm_fert, h=486)
forecast_mort = forecast(fdm_mort, h=484)
forecast_imm = forecast(fdm_imm, h=485)
fitted_fert = forecast_fert['fitted'][[1]]['y']
fitted_mort = forecast_mort['fitted'][[1]]['y']
fitted_imm = forecast_imm['fitted'][[1]]['y']
write.csv(fitted_fert,'r_forecasts/fert_fitted.csv', row.names = FALSE)
write.csv(fitted_mort,'r_forecasts/mort_fitted.csv', row.names = FALSE)
write.csv(fitted_imm,'r_forecasts/imm_fitted.csv', row.names = FALSE)
future_fert = forecast_fert['rate']
future_mort = forecast_mort['rate']
future_imm = forecast_imm['rate']
write.csv(future_fert,'r_forecasts/fert_pred.csv', row.names = FALSE)
write.csv(future_mort,'r_forecasts/mort_pred.csv', row.names = FALSE)
write.csv(future_imm,'r_forecasts/imm_pred.csv', row.names = FALSE)
rm(list=ls())
library(rlang)
library(reticulate)
use_python('/usr/local/bin/python')
library(demography)
getwd()
setwd('/Users/adamalexanderoppenheimer/Desktop/DynamicPop/data/demographic')
pd <- import('pandas')
fert_full <- pd$read_pickle('clean/fert.p')
pop_data <- fert_full[[1]]
fert_data <- fert_full[[2]]
mort_full <- pd$read_pickle('clean/mort.p')
non_inf_mort <- mort_full[[3]]
inf_mort <- mort_full[[4]]
mort_data = matrix(rbinom(100 * 70, 1, 0.5), ncol = 70, nrow = 100)
for (i in 1:dim(inf_mort)) {
mort_data[,i] = prepend(unlist(non_inf_mort[i]), unlist(inf_mort[i]))
}
mort_data = as.data.frame(mort_data)
colnames(mort_data) <- colnames(non_inf_mort)
imm_data <- pd$read_pickle('clean/imm.p')
########################################
##### Construct Demography Objects #####
########################################
# Box-Cox (lambda) values: 0 (for mortality), 0.4 (for fertility) and 1 (for migration)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/read.demogdata
demog_obj_fert = demogdata(fert_data, pop_data[15:51, 1:68], as.numeric(rownames(fert_data)), as.numeric(colnames(pop_data[,1:68])), 'fertility', 'Japan', 'Total', 0.4)
demog_obj_mort = demogdata(mort_data, pop_data[, 1:70], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[, 1:70])), 'mortality', 'Japan', 'Total', 0)
demog_obj_imm = demogdata(imm_data, pop_data[51:69], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[51:69])), 'migration', 'Japan', 'Total', 1)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/fdm
# Set transform = FALSE to ensure past data is able to be used in graphs
fdm_fert = fdm(demog_obj_fert, transform = FALSE)
fdm_mort = fdm(demog_obj_mort, transform = FALSE)
fdm_imm = fdm(demog_obj_imm, transform = FALSE)
# Forecast variables up to 2100 (up to 2050 for model, up to 2501 for graphs)
forecast_fert = forecast(fdm_fert, h=487)
forecast_mort = forecast(fdm_mort, h=485)
forecast_imm = forecast(fdm_imm, h=486)
fitted_fert = forecast_fert['fitted'][[1]]['y']
fitted_mort = forecast_mort['fitted'][[1]]['y']
fitted_imm = forecast_imm['fitted'][[1]]['y']
write.csv(fitted_fert,'r_forecasts/fert_fitted.csv', row.names = FALSE)
write.csv(fitted_mort,'r_forecasts/mort_fitted.csv', row.names = FALSE)
write.csv(fitted_imm,'r_forecasts/imm_fitted.csv', row.names = FALSE)
future_fert = forecast_fert['rate']
future_mort = forecast_mort['rate']
future_imm = forecast_imm['rate']
write.csv(future_fert,'r_forecasts/fert_pred.csv', row.names = FALSE)
write.csv(future_mort,'r_forecasts/mort_pred.csv', row.names = FALSE)
write.csv(future_imm,'r_forecasts/imm_pred.csv', row.names = FALSE)
rm(list=ls())
library(rlang)
library(reticulate)
use_python('/usr/local/bin/python')
library(demography)
getwd()
setwd('/Users/adamalexanderoppenheimer/Desktop/DynamicPop/data/demographic')
pd <- import('pandas')
fert_full <- pd$read_pickle('clean/fert.p')
pop_data <- fert_full[[1]]
fert_data <- fert_full[[2]]
mort_full <- pd$read_pickle('clean/mort.p')
non_inf_mort <- mort_full[[3]]
inf_mort <- mort_full[[4]]
mort_data = matrix(rbinom(100 * 70, 1, 0.5), ncol = 70, nrow = 100)
for (i in 1:dim(inf_mort)) {
mort_data[,i] = prepend(unlist(non_inf_mort[i]), unlist(inf_mort[i]))
}
mort_data = as.data.frame(mort_data)
colnames(mort_data) <- colnames(non_inf_mort)
imm_data <- pd$read_pickle('clean/imm.p')
########################################
##### Construct Demography Objects #####
########################################
# Box-Cox (lambda) values: 0 (for mortality), 0.4 (for fertility) and 1 (for migration)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/read.demogdata
demog_obj_fert = demogdata(fert_data, pop_data[15:51, 1:68], as.numeric(rownames(fert_data)), as.numeric(colnames(pop_data[,1:68])), 'fertility', 'Japan', 'Total', 0.4)
demog_obj_mort = demogdata(mort_data, pop_data[, 1:70], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[, 1:70])), 'mortality', 'Japan', 'Total', 0)
demog_obj_imm = demogdata(imm_data, pop_data[51:69], as.numeric(rownames(imm_data)), as.numeric(colnames(pop_data[51:69])), 'migration', 'Japan', 'Total', 1)
# Source: https://www.rdocumentation.org/packages/demography/versions/1.22/topics/fdm
# Set transform = FALSE to ensure past data is able to be used in graphs
fdm_fert = fdm(demog_obj_fert, transform = FALSE)
fdm_mort = fdm(demog_obj_mort, transform = FALSE)
fdm_imm = fdm(demog_obj_imm, transform = FALSE)
# Forecast variables up to 2100 (up to 2050 for model, up to 3000 for graphs)
forecast_fert = forecast(fdm_fert, h=986)
forecast_mort = forecast(fdm_mort, h=984)
forecast_imm = forecast(fdm_imm, h=985)
fitted_fert = forecast_fert['fitted'][[1]]['y']
fitted_mort = forecast_mort['fitted'][[1]]['y']
fitted_imm = forecast_imm['fitted'][[1]]['y']
write.csv(fitted_fert,'r_forecasts/fert_fitted.csv', row.names = FALSE)
write.csv(fitted_mort,'r_forecasts/mort_fitted.csv', row.names = FALSE)
write.csv(fitted_imm,'r_forecasts/imm_fitted.csv', row.names = FALSE)
future_fert = forecast_fert['rate']
future_mort = forecast_mort['rate']
future_imm = forecast_imm['rate']
write.csv(future_fert,'r_forecasts/fert_pred.csv', row.names = FALSE)
write.csv(future_mort,'r_forecasts/mort_pred.csv', row.names = FALSE)
write.csv(future_imm,'r_forecasts/imm_pred.csv', row.names = FALSE)
